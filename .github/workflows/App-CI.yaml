name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "app/**"  

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # # Run HTML & CSS Linting 
      # - name: Run HTML & CSS Linting
      #   run: |
      #     npm install -g htmlhint csslint
      #     htmlhint app/**/*.html || true
      #     csslint app/css || true

      # Run HTML & CSS Linting 
      - name: Run HTML & CSS Linting
        run: |
          npm install -g htmlhint csslint
          find app -name "*.html" -exec htmlhint {} \; || true
          find app/css -name "*.css" -exec csslint {} \; || true

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t skyebank:${{ github.sha }} ./app

      # Run the Docker Container for Testing
      - name: Run Container & Test
        run: |
          docker run -d --name test-container -p 8080:8080 skyebank:${{ github.sha }}
          sleep 10  
          curl -I http://localhost:8080 | grep "200 OK"
          sleep 5
          docker stop test-container && docker rm test-container

      # Security Scan with Trivy
      - name: Trivy Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image skyebank:${{ github.sha }}

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        # uses: actions/checkout@v3
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build, Tag and push Docker image to AWS ECR
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # skyebank
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:v2.${{ github.run_number }} app/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:v2.${{ github.run_number }}


      - name: Debug and Update Kubernetes Deployment Manifest
        run: |
          TAG="v2.${{ github.run_number }}"
          echo "Updating deployment manifest with new image tag: $TAG"

          echo "Before update:"
          grep "image: " kubernetes/deployment/deployment-def.yml || echo "No image found"

          # Update the image tag
          sed -i "s|\(image: .*/skyebank:\)v[0-9]*\.[0-9]*|\1$TAG|g" kubernetes/deployment/deployment-def.yml

          echo "After update:"
          grep "image: " kubernetes/deployment/deployment-def.yml || echo "No image found"

          echo "Updated manifest:"
          cat kubernetes/deployment/deployment-def.yml



      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add kubernetes/deployment/deployment-def.yml
          git commit -m "Update image tag to v2.${{ github.run_number }}" || echo "No changes to commit"
          git push
